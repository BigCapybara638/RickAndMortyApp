package com.example.rickandmortyapp.api

import android.content.Context
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import kotlin.collections.emptyList

class RickRepository(private val context: Context) {
    private val apiService = RetrofitClient.rickApiService
    private val database = AppDatabase.getInstance(context)
    private val characterDao = database.characterDao()

    suspend fun getCharacterList(limit: Int = 50): List<CharacterItem> {
        return try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            val response = apiService.getCharacterList()
            val characters = response.result?.take(limit) ?: emptyList()

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            saveCharactersToDatabase(characters)

            println("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API: ${characters.size} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            characters

        } catch (e: Exception) {
            println("üî¥ API failed: ${e.message}, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞")
            // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            getCharactersFromDatabase(limit)
        }
    }

    fun getCharactersFlow(): Flow<List<CharacterItem>> {
        return characterDao.getAllCharacters().map { entities ->
            entities.map { it.toCharacterItem() }
        }
    }

    private suspend fun saveCharactersToDatabase(characters: List<CharacterItem>) {
        try {
            val entities = characters.map { it.toCharacterEntity() }
            characterDao.deleteAllCharacters() // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            characterDao.insertCharacters(entities)
            println("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É: ${entities.size} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: ${e.message}")
        }
    }

    private suspend fun getCharactersFromDatabase(limit: Int): List<CharacterItem> {
        return try {
            val entities = characterDao.getCharacters(limit)
            val characters = entities.map { it.toCharacterItem() }
            println("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞: ${characters.size} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            characters
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–µ—à–∞: ${e.message}")
            emptyList()
        }
    }
}

// Extension functions –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É Entity –∏ CharacterItem
private fun CharacterItem.toCharacterEntity(): CharacterEntity {
    return CharacterEntity(
        id = this.id,
        name = this.name,
        status = this.status,
        species = this.species,
        gender = this.gender,
        imageUrl = this.imageUrl,
        episodes = this.episodes.joinToString(",") // –°–æ—Ö—Ä–∞–Ω—è–µ–º episodes –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    )
}

private fun CharacterEntity.toCharacterItem(): CharacterItem {
    return CharacterItem(
        id = this.id,
        name = this.name,
        status = this.status,
        species = this.species,
        gender = this.gender,
        imageUrl = this.imageUrl,
        episodes = this.episodes.split(",") // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ episodes
    )
}