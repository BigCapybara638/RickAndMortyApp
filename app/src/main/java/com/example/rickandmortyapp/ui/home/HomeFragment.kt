package com.example.rickandmortyapp.ui.home

import android.graphics.Rect
import android.os.Bundle
import com.example.rickandmortyapp.R
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.rickandmortyapp.FilterBottomSheetDialog
import com.example.rickandmortyapp.data.network.CharacterItem
import com.example.rickandmortyapp.databinding.FragmentHomeBinding
import com.google.android.material.snackbar.Snackbar
import kotlinx.coroutines.launch

class HomeFragment : Fragment() {
    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!
    private val characterAdapter = HomeAdapter()

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º by viewModels() —Å —Ñ–∞–±—Ä–∏–∫–æ–π –¥–ª—è Application
    private val viewModel: HomeViewModel by viewModels {
        HomeViewModelFactory(requireActivity().application)
    }

    private var isFirstDataLoad = true

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupRecyclerView()
        observeViewModel()
        setupFilterButton()
        setupSwipeRefresh()

        // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ init ViewModel
    }

    private fun setupRecyclerView() {
        binding.characterRecycle.apply {
            adapter = characterAdapter
            layoutManager = GridLayoutManager(
                requireContext(),
                2,
                GridLayoutManager.VERTICAL,
                false
            )

            setHasFixedSize(true)
            val spacing = (16 * resources.displayMetrics.density).toInt()
            addItemDecoration(SpacesItemDecoration(spacing))
        }

        characterAdapter.onItemClick = { character ->
            openCharacterDetail(character)
        }
    }

    private fun setupFilterButton() {
        // –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –≤–∞—à layout (–≤ toolbar –∏–ª–∏ floating action button)
        binding.filterButton.setOnClickListener {
            showFilterDialog()
        }
    }

    private fun showFilterDialog() {
        val filterDialog = FilterBottomSheetDialog()
        filterDialog.setCurrentFilters(
            viewModel.currentStatusFilter.value,
            viewModel.currentGenderFilter.value,
            viewModel.currentSpeciesFilter.value
        )
        filterDialog.setOnFiltersAppliedListener { status, gender, species ->
            viewModel.setStatusFilter(status)
            viewModel.setGenderFilter(gender)
            viewModel.setSpeciesFilter(species)
        }
        filterDialog.show(parentFragmentManager, "FilterBottomSheet")
    }



    private fun setupSwipeRefresh() {
        binding.swipeRefreshLayout.setOnRefreshListener {
            viewModel.refreshData()
        }
    }

    private fun observeViewModel() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.characters.collect { characters ->
                characterAdapter.submitList(characters) {
                    // –≠—Ç–æ—Ç callback –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                    if (characters.isNotEmpty()) {

                        if (isFirstDataLoad) {
                            binding.characterRecycle.post {
                                binding.characterRecycle.scrollToPosition(0)
                            }
                            isFirstDataLoad = false
                        }

                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                        binding.characterRecycle.scrollToPosition(0)

                        binding.swipeRefreshLayout.isRefreshing = false

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        updateResultsCount(characters.size)

                    }

                }
                binding.swipeRefreshLayout.isRefreshing = false
                println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å ${characters.size} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            }
        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.isLoading.collect { isLoading ->
                binding.progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE
            }
        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.errorMessage.collect { errorMessage ->
                errorMessage?.let {
                    Snackbar.make(binding.root, it, Snackbar.LENGTH_LONG)
                        .setAction("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") { viewModel.refreshData() }
                        .show()
                    viewModel.clearError()
                }
            }
        }
    }

    private fun updateResultsCount(count: Int) {
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Snackbar –∏–ª–∏ TextView
        binding.resultsCountText.text = "–ù–∞–π–¥–µ–Ω–æ: $count"
    }


    private fun openCharacterDetail(character: CharacterItem) {
        val bundle = Bundle().apply {
            putParcelable("character", character)
        }
        findNavController().navigate(R.id.action_first_to_second, bundle)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}

class SpacesItemDecoration(private val space: Int) : RecyclerView.ItemDecoration() {
    override fun getItemOffsets(
        outRect: Rect,
        view: View,
        parent: RecyclerView,
        state: RecyclerView.State
    ) {
        outRect.left = space / 2
        outRect.right = space / 2
        outRect.top = space / 4
        outRect.bottom = space / 2
    }
}